#!/bin/sh
# vim: set ft=sh:

PROG=`basename $0`
BASEDIR=$(dirname "$0")

HELP() {
	echo "Usage: $PROG -d <directory> -k <keytab> [-e <environment>] [-b <branch>] [-r <remote>]"
	echo
	echo "  -b <branch>: git branch to build the website from (defaults to master)"
	echo "  -d <directory>: where to find the website to build"
	echo "  -e <environment>: staging or production (defaults to staging)"
	echo "  -k <keytab>: location of the keytab file to use"
	echo "  -r <remote>: git remote to pull from (defaults to origin)"
	exit 1
}

if [ $# -lt 6 ]; then
	HELP
fi

eval set -- `getopt b:d:e:k:r: "$@"`

BRANCH="master"
REMOTE="origin"
ENVIRONMENT="staging"

while [ $# -gt 0 ]; do
    case "$1" in
        -b ) BRANCH="$2"; shift;;
        -d ) DIRECTORY="$2"; shift;;
        -e ) ENVIRONMENT="$2"; shift;;
        -k ) KEYTAB="$2"; shift;;
        -r ) REMOTE="$2"; shift;;
    esac
    shift
done

#
# Check prerequisites
#

# rbenv installation
if [ ! -d "$HOME/.rbenv/bin" ]; then
	echo "Could not find ~/.rbenv/bin -- have you installed rbenv?"
	exit 1
fi

# keytab existence
if [ ! -f $KEYTAB ]; then
	echo "Keytab file does not exist"
	exit 1
fi

# website path existence
if [ ! -d $DIRECTORY ]; then
	echo "Website directory does not exist"
	exit 1
fi


PATH="$HOME/.rbenv/bin:$PATH"
export TZ=UTC

eval "$(rbenv init -)"

while true; do
	# Save the start time and print the date, for good measure
	START=$(date +%s)

	echo "Starting build at $(date)"
	echo

	# Navigate into the website directory
	cd "$DIRECTORY"

	# Refresh the credentials
	PRINCIPAL=$(ktutil --keytab=$KEYTAB list | head -n 4 | tail -n 1 | cut -d' ' -f 7)

	kdestroy
	kinit -t "$KEYTAB" "$PRINCIPAL"

	# Fetch the latest version
	git checkout $BRANCH
	git pull --rebase $REMOTE $BRANCH

	# Always trigger a rebuild of the events and amendments page
	touch content/schedule/events.html
	touch content/schedule/amendments.html

	# Refresh the local export
	nanoc update -y

	# Compile the website
	nanoc compile

	# Deploy the website to the relevant target
	if [ "$ENVIRONMENT" = "production" ]; then
		nanoc deploy -t public
	else
		nanoc deploy
	fi

	# Update the index
	if [ "$ENVIRONMENT" = "production" ]; then
		nanoc index -e production
	else
		nanoc index
	fi

	# Output the time at which we were done, and the time it took
	NOW=$(date +%s)
	BUILDTIME=`expr $NOW - $START`
	SLEEPTIME=`expr $START + 240`

	echo
	echo "Build done at $(date), build took $BUILDTIME seconds"

	# Sleep until at least four minutes have passed since we started building
	if [ $NOW -lt $SLEEPTIME ]; then
		SLEEP=`expr $SLEEPTIME - $NOW`

		echo "Sleeping for $SLEEP seconds"
		sleep $SLEEP
	else
		echo "Build took longer than backoff timer, not sleeping"
	fi

	echo
done
